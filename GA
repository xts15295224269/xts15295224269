'''这是一个能实现遗传算法求二元最值的作业'''
import math
from matplotlib import pyplot as plt
import random


# 计算2进制序列代表的数值
def b_d(b, max_value, chrom_length):
	t = 0
	for j in range(len(b)):
		t += b[j] * (math.pow(2, j))
	t = t * max_value / (math.pow(2, chrom_length) - 1)
	return t


#定义一个随机生成序列的函数，用于creat pop
def gene_Encoding(pop_size, chrom_length):
    pop = [[]]
    for i in range(pop_size):
        temp = []
        for j in range(chrom_length):
            temp.append(random.randint(0, 1))
        pop.append(temp)

    return pop[1:]

#定义一个解码器用于改成二进制
def decode_chrom(pop, chrom_length):
    temp = []
    for i in range(len(pop)):
        t = 0
        for j in range(chrom_length):
            t += pop[i][j] * (math.pow(2, j))
        temp.append(t)
    return temp



#校准对象值，并且确定未知数和函数
def cal_obj_Value(pop, chrom_length, max_value):
    temp1 = []
    temp2 = []
    obj_value = []
    g = 9.8
    temp1 = decode_chrom(pop, chrom_length)
    temp2 = decode_chrom(pop, chrom_length)
    for i in range(len(temp1)):
        x = temp1[i] * max_value / (math.pow(2, chrom_length) - 1)
        y = temp2[i] * max_value / (math.pow(2, chrom_length) - 1)
        if x<= y:
            x = x+y+1
            y = y
        z = x * y * math.sqrt(2 * g / (x*x-y*y))
        obj_value.append(z)
    return obj_value



#去除负值，挑出优化解，返回一个fit_value表
def cal_fit_Value(obj_value):
    fit_value = []
    c_min = 0
    for i in range(len(obj_value)):
        if(obj_value[i] + c_min > 0):
            temp = c_min + obj_value[i]
        else:
            temp = 0.0
        fit_value.append(temp)
    return fit_value


#累计，计算fit——value表（优值解）所有值的和
def Sum(fit_value):
	sum = 0
	for i in range(len(fit_value)):
		sum += fit_value[i]
	return sum

#定义一个用于计算累计适应度概率的函数cumsum
def cumsum(fit_value):
	for i in range(-1, len(fit_value)-2, 1):
		t = 0
		j = 0
		while(j <= i):
			t += fit_value[j]
			j += 1
		fit_value[i] = t
		fit_value[len(fit_value)-1] = 1

#进行选择，新的newfitvalue里面放优值解的概率，
def selection(pop, fit_value):
	newfit_value = []
	# 适应度总和
	total_fit = sum(fit_value)
	for i in range(len(fit_value)):
		newfit_value.append(fit_value[i] / total_fit)
	# 计算累计概率，会返回newfitvalue
	cumsum(newfit_value)
	ms = []
	for i in range(len(pop)):
		ms.append(random.random())
	ms.sort()#对ms排序
	fitin = 0
	newin = 0
	newpop = pop
	# 转轮盘选择法
	while newin < len(pop):
		if(ms[newin] < newfit_value[fitin]):
			newpop[newin] = pop[fitin]
			newin = newin + 1
		else:
			fitin = fitin + 1
	pop = newpop


#定义交配
def crossover(pop, pc):
    pop_len = len(pop)
    for i in range(pop_len - 1):
        if(random.random() < pc):
            cpoint = random.randint(0,len(pop[0]))
            temp1 = []
            temp2 = []
            temp1.extend(pop[i][0:cpoint])
            temp1.extend(pop[i+1][cpoint:len(pop[i])])
            temp2.extend(pop[i+1][0:cpoint])
            temp2.extend(pop[i][cpoint:len(pop[i])])
            pop[i] = temp1
            pop[i+1] = temp2

#定义变异
def mutation(pop, pm):
	px = len(pop)

	for i in range(len(pop)):
		if (random.random() < pm):
			mpoint = random.randint(0, len(pop[0]) - 1)
			if (pop[i][mpoint] == 1):
				pop[i][mpoint] = 0
			else:
				pop[i][mpoint] = 1

# 找出最优解和最优解的基因编码
def best(pop, fit_value):
    px = len(pop)
    best_individual = []
    best_fit = fit_value[0]
    for i in range(1, px):
        if(fit_value[i] > best_fit):
            best_fit = fit_value[i]
            best_individual = pop[i]
    return [best_individual, best_fit]

pop_size = 500		# 种群数量
max_value = 10      # 基因中允许出现的最大值
chrom_length = 10	# 染色体长度
pc = 0.6			# 交配概率
pm = 0.01           # 变异概率
results = [[]]		# 存储每一代的最优解，N个二元组
fit_value = []		# 个体适应度
fit_mean = []		# 平均适应度


pop = gene_Encoding(pop_size, chrom_length)




# 遗传算法过程
for i in range(pop_size):
	obj_value = cal_obj_Value(pop, chrom_length, max_value)       # 个体评价
	fit_value = cal_fit_Value(obj_value)      # 淘汰
	best_individual, best_fit = best(pop, fit_value)		# 第一个存储最优的解, 第二个存储最优基因

	results.append([best_fit, b_d(best_individual, max_value, chrom_length)])
	selection(pop, fit_value)		# 新种群复制
	crossover(pop, pc)		# 交配
	mutation(pop, pm)       # 变异


results = results[1:]
results.sort()
print(results[-1])
print(best_individual)
print(best_fit)
print(obj_value[1])



print(results)
print("y = %f, x = %f" % (results[-1][0], results[-1][1]))

X = []
Y = []
for i in range(500):
	X.append(i)
	t = results[i][0]
	Y.append(t)
#print(M)
plt.plot(X,Y)

plt.show()
